/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitPreparedTreeWithRoot
 * @category generated
 */
export type InitPreparedTreeWithRootInstructionArgs = {
  root: number[] /* size: 32 */
  rightmostLeaf: number[] /* size: 32 */
  rightmostIndex: number
}
/**
 * @category Instructions
 * @category InitPreparedTreeWithRoot
 * @category generated
 */
export const initPreparedTreeWithRootStruct = new beet.BeetArgsStruct<
  InitPreparedTreeWithRootInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['root', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['rightmostLeaf', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['rightmostIndex', beet.u32],
  ],
  'InitPreparedTreeWithRootInstructionArgs'
)
/**
 * Accounts required by the _initPreparedTreeWithRoot_ instruction
 *
 * @property [_writable_] merkleTree
 * @property [**signer**] authority
 * @property [] noop
 * @category Instructions
 * @category InitPreparedTreeWithRoot
 * @category generated
 */
export type InitPreparedTreeWithRootInstructionAccounts = {
  merkleTree: web3.PublicKey
  authority: web3.PublicKey
  noop: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initPreparedTreeWithRootInstructionDiscriminator = [
  218, 248, 192, 55, 91, 205, 122, 10,
]

/**
 * Creates a _InitPreparedTreeWithRoot_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitPreparedTreeWithRoot
 * @category generated
 */
export function createInitPreparedTreeWithRootInstruction(
  accounts: InitPreparedTreeWithRootInstructionAccounts,
  args: InitPreparedTreeWithRootInstructionArgs,
  programId = new web3.PublicKey('mcmt6YrQEMKw8Mw43FmpRLmf7BqRnFMKmAcbxE3xkAW')
) {
  const [data] = initPreparedTreeWithRootStruct.serialize({
    instructionDiscriminator: initPreparedTreeWithRootInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.merkleTree,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.noop,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
